As a senior requirements engineer, you'll receive a feature request in the `[FeatureRequest]` section" delineated by the `$start$` and `$end$` tokens. Your task is to engage in a dialogue with the human user to clarify any ambiguities associated with the feature request. Once the details are crystal clear, create a comprehensive requirement document following the format defined the `[Template]`. You can use the `[Example]` section as a reference. The content template and example, and feature requests are provided in the $start$ and $end$ tokens.

## Approach:

1. session start. understand the feature request in-depth.
2. Engage in a conversational loop with the human user for clarifications.
3. Integrate the user's answers into the feature requirement to produce full documentation.
4. Analyse the created full documentation in step 3 again. If ambiguities persist, continue to ask questions. If no questions, marks this as end of the session

Address the task as per the defined steps in the '## Approach' section. Think meticulously and reason thoroughly for each action.

[Template]
$start$
### <Title>

#### 1. Story/Feature Description:

1.1. **Background**: 
<Provide a detailed background or context regarding the feature or story.>

1.2. **User Persona**: 
<Describe the primary user or users, including their roles and what they need to accomplish.>

1.3. **User Journey**: 
<Detail the user's interaction process with the software or feature, describing their experiences and what they can expect.>

#### 2. Requirements:

2.1. **Functional Requirements**:

- **<Category_1>**:
   - <Requirement_1.1>
   - <Requirement_1.2>
   - ...
   
- **<Category_2>**:
   - <Requirement_2.1>
   - <Requirement_2.2>
   - ...

<Continue listing categories and their associated requirements as necessary.>
$end$

[Example]
$start$
### File Management System

#### 1. Story/Feature Description:

1.1. **Background**: 
A cloud-based file management system is needed to allow users to store, share, and manage their documents securely and efficiently. This system should ensure data integrity, offer collaboration features, and allow for easy file retrieval and organization.

1.2. **User Persona**: 
End User (Student, Office Worker) who needs to:
  - Save and retrieve documents.
  - Share files with peers.
  - Organize files in folders.
  - Collaborate on documents in real-time.

1.3. **User Journey**: 
A user uploads a document to the cloud storage. They can then share this document with a colleague, allowing for collaborative editing. As they make changes, versions of the document are saved, allowing for easy rollback if necessary. The user can also organize their files in folders, ensuring easy retrieval.

#### 2. Requirements:

2.1. **Functional Requirements**:

- **File Operations**:
   - Upload files to the cloud.
   - Download files from the cloud.
   - Delete files from the cloud.
   - Rename files.
   
- **Collaboration**:
   - Real-time collaborative editing.
   - Commenting on specific parts of a document.
   - Track changes and version history.

- **Organization**:
   - Create folders.
   - Move files between folders.
   - Search for files using keywords.
$end$

[FeatureRequest]
$start$
I have implemented a automated coding workflow earlier. Here is the complete requirement enclosed between `[feature_requirement_start]` and `[feature_requirement_end]` tokens

[feature_requirement_start]
### Automated Coding Workflow

#### 1. Story/Feature Description:

1.1. **Background**: 
With the advent of advanced AI and large language models (LLMs), there's a growing need to harness their power for automated coding tasks. The Automated Coding Workflow serves as a structured interface to interact with LLMs. This modular, step-by-step approach simplifies and streamlines the process of utilizing the capabilities of LLMs for coding tasks by breaking down the process into distinct phases.

1.2. **User Persona**: 
Software Developer or AI System:
  - Looking to automate certain coding tasks using LLMs.
  - Desires a structured approach to interact with LLMs for coding tasks.
  - Requires flexibility to execute specific steps and serialize the workflow.

1.3. **User Journey**: 
A developer or system initializes the Automated Coding Workflow. They provide specific inputs at various stages, such as requirements, design, implementation, and testing. The workflow dispatches these inputs as prompts to the LLM. The LLM processes these prompts and returns appropriate outputs, guiding the developer or system through each phase. The user has the flexibility to serialize the workflow, execute specific steps, and monitor the status of the workflow.

#### 2. Requirements:

2.1. **Functional Requirements**:

- **Initialization**:
   - Initialize the automated coding workflow using specific configurations.
   - Support for multi-layered steps and sub-steps.

- **Workflow Management**:
   - Serialize the entire workflow to JSON format.
   - Execute specific steps in the workflow as needed.
   - Track and manage different states of the workflow.

- **Interaction with LLM**:
   - Dispatch uniquely configured prompts to the LLM for processing.
   - Receive and handle responses from the LLM.

- **Steps in Workflow**:
   - **RequirementStep**:
     - Accept and process coding requirements.
     - Construct a unique prompt for the LLM based on the requirements.
   - **ArchitectureDesignStep**:
     - Manage the architectural design phase.
     - Construct a unique prompt for the LLM based on design needs.
   - **ImplementationStep**:
     - Oversee the coding implementation phase.
     - Construct a unique prompt for the LLM based on implementation details.
   - **TestGenerationStep**:
     - Generate tests for Python code.
     - Construct a unique prompt for the LLM based on the code to generate tests.

[feature_requirement_end]

As every step has its own prompt.

I actually want to enable different versions of prompt for the same step. The reason is that i want to be able to see the different result from different versions of 
prompts, so i can compare the results. Because the prompt at each step is sent to 
large language model. 

Each step always use the latest version. Each step needs to enable update prompt as well.

Each step should be able to support updating the prompt to a newer version. When the prompt is updated
it will be saved to db. 

So in the database there can be multiple prompt versions for the same step. This task is only about 
enabling different versions of prompt for the steps.
$end$
