### Module Code Specification:

#### 1. Code Architecture Design:

##### 1.1. High-Level Design
The `AutomatedCodingWorkflow` module provides a structured way to manage and execute a multi-step automated coding workflow. The architecture is modular, with each step in the workflow being an instance of a class derived from `BaseStep`. Steps can have sub-steps, allowing for a potentially multi-level workflow.

##### 1.2. New Components Specifications

###### 1.2.1. Fully Defined

- **AutomatedCodingWorkflow (New)**
    - **Purpose**: Manages and executes a fully automated coding workflow comprising multiple steps, potentially with sub-steps.
    - **Attributes**:
        - `workspace_setting`: Settings associated with the workspace.
        - `llm_integration_registry`: Registry for managing integrations with an LLM system.
        - `steps`: Dictionary of step instances keyed by their step IDs.
    - **Methods/APIs**:
        - `_initialize_steps(steps_config: Dict[str, StepsTemplateConfig])`: Initializes the steps of the workflow from a given configuration.
        - `to_json()`: Converts the workflow instance to a JSON representation.
        - `execute_step(step_id: str)`: Executes a specific step within the workflow using its ID.
        - `start_workflow()`: Starts the workflow, currently only sets the status to 'Started'.
    - **Interactions**: Uses instances of `BaseStep` to represent and manage individual steps in the workflow.

- **BaseStep (New) [extends ABC, PromptVersioningMixin]**
    - **Purpose**: Serves as an abstract base class for all steps in the automated coding workflow. Provides functionalities such as unique ID generation, dynamic prompt construction, and version management. Each derived step should implement methods to process responses and execute the step's logic.
    - **Attributes**:
        - `name`: Class attribute representing the step's name.
        - `id`: Unique ID for each instance.
        - `workflow`: Reference to the associated workflow.
        - `default`: The constructed prompt for the step using the versioning system.
    - **Methods/APIs**:
        - `to_dict()`: Converts the `BaseStep` instance to a dictionary representation.
        - `construct_prompt()`: Constructs the prompt for this step using the versioning system.
        - `process_response(response: str)`: Abstract method to process the response from the LLM API for the step.
        - `execute()`: Abstract method defining the step's execution logic.
    - **Interactions**: Interacts with the `PromptTemplate` for prompt details, uses `PromptVersioningMixin` for versioning capabilities, and associates with a workflow through `BaseWorkflow`.

- **RequirementStep (New) [extends BaseStep]**
    - **Purpose**: Represents a step in the workflow where a coding requirement is presented to the user. The step prompts the user with the requirement and provides guidelines on how to address it.
    - **Attributes**:
        - `name`: Class attribute representing the step's name as "requirement".
        - `requirement_variable`: Prompt variable capturing user input for requirements.
        - `prompt_template`: Template for constructing the step's prompt.
    - **Methods/APIs**:
        - `construct_prompt(requirement: str) -> str`: Constructs the prompt for this step.
        - `process_response(response: str)`: Processes the response from the LLM API for this step.
        - `execute()`: Defines the step's execution logic.
    - **Interactions**: Uses `PromptTemplate` and `PromptTemplateVariable` for prompt construction.

- **ArchitectureDesignStep (New) [extends BaseStep]**
    - **Purpose**: Represents the design stage in the automated coding workflow.
    - **Attributes**:
        - `name`: Class attribute representing the step's name as "design".
        - `prompt_template`: Template for constructing the step's prompt, containing a partial prompt.
    - **Methods/APIs**: Inherits methods from `BaseStep`.
    - **Interactions**: Uses `PromptTemplate` and potentially `PromptTemplateVariable` for prompt construction.

- **WorkflowStatus (New) [Enum]**
    - **Purpose**: Enumeration representing the status of a workflow.
    - **Possible Values**:
        - `Success`: Indicates the successful completion of a workflow.
        - `Started`: Indicates that a workflow has been initiated.
        - `Failure`: Indicates that the workflow failed to complete successfully.

- **StepsTemplateConfig (New) [TypedDict]**
    - **Purpose**: Represents the configuration for individual steps in the workflow.
    - **Attributes**:
        - `step_class`: Type of the step.
        - `steps`: Dictionary of further step configurations, allowing for nested step configurations.

- **WorkflowTemplateStepsConfig (New) [TypedDict]**
    - **Purpose**: Represents the overall configuration for the workflow.
    - **Attributes**:
        - `workspace_path`: Path to the workspace.
        - `steps`: Dictionary containing configurations for individual steps in the workflow.

- **WORKFLOW_CONFIG (New) [Dict]**
    - **Purpose**: Defines the structure of the automated coding workflow, specifying steps and potential substeps.
    - **Attributes**:
        - `steps`: Dictionary that defines the steps of the workflow. Each step contains:
            - `step_class`: The class representing the step.
            - `steps`: Dictionary of substeps, if applicable. Follows the same structure as the main steps.
    - **Examples of Steps**:
        - `requirement_step`: Contains a `refine` substep.
        - `test_generation_step`: Represents the step for generating tests.
        - `implementation_step`: Represents the step for implementing subtasks.
        - `testing_step`: Represents the step for running tests.

- **BaseWorkflow (New)**
    - **Purpose**: A base class for custom workflows. Offers a foundation for creating custom workflows with unique IDs, status, and optional configuration. Supports optional LLM integration.
    - **Attributes**:
        - `name`: Class attribute to represent the workflow's name.
        - `config`: Class attribute for the workflow configuration.
        - `id`: Unique ID for each instance.
        - `status`: Current status of the workflow.
        - `llm_integration`: Reference to the LLM integration.
    - **Methods/APIs**:
        - `set_workflow_name(name: str)`: Sets the name of the workflow.
        - `set_workflow_config(config: WorkflowTemplateStepsConfig)`: Sets the configuration for the workflow.
        - `get_workflow_status() -> WorkflowStatus`: Gets the current status of the workflow.
        - `start_workflow()`: Sets the workflow status to 'Started' and expects derived classes to implement the actual workflow logic.
        - `execute_step(step_config: dict)`: Raises a NotImplementedError, expects derived classes to implement the step execution logic.
    - **Interactions**: Uses `UniqueIDGenerator` to generate unique IDs, interacts with `WorkflowStatus` for status values, and `WorkflowTemplateStepsConfig` for configuration.

###### 1.2.2. Part-Of Components (Pending File Provision)


##### 1.3. Used-By Dependencies (Unchanged Components)

- **WorkspaceSetting (Used-By)**
    - **Purpose**: Represents the settings associated with the workspace.
    - **Interactions**: Used by `AutomatedCodingWorkflow` to manage workspace settings.

- **LLMIntegrationRegistry (Used-By)**
    - **Purpose**: Manages integrations with an LLM system.
    - **Interactions**: Used by `AutomatedCodingWorkflow` to manage LLM integrations.

- **PromptTemplate (Used-By)**
    - **Purpose**: Assumed to relate to the construction of prompts for each step in the workflow.
    - **Interactions**: Utilized within the `BaseStep` and `RequirementStep` for constructing the prompt.

- **PromptVersioningMixin (Used-By)**
    - **Purpose**: Provides versioning capabilities for the steps.
    - **Interactions**: Incorporated into the `BaseStep` class for versioning functionalities.

- **UniqueIDGenerator (Used-By)**
    - **Purpose**: Generates unique IDs.
    - **Interactions**: Used by the `BaseStep` to generate a unique ID for each instance.

- **PromptTemplateVariable (Used-By)**
    - **Purpose**: Represents a variable in the `PromptTemplate` that captures specific input or details.
    - **Interactions**: Utilized within the `RequirementStep` for prompt variable details.

- **BaseLLMIntegration (Used-By)**
    - **Purpose**: Provides a foundation for LLM system integration in workflows.
    - **Interactions**: Used by `BaseWorkflow` for LLM system integration.

##### 1.4. Interactions Overview
The `AutomatedCodingWorkflow` initializes its steps based on the `WORKFLOW_CONFIG`. Each step is represented by an instance of a class derived from `BaseStep`. The workflow also interacts with the `LLMIntegrationRegistry` to manage integrations with an LLM system. The `execute_step` method allows for the execution of individual steps by their IDs, while the `start_workflow` method is intended to start the entire workflow process.

The `BaseStep` provides foundational methods and attributes required for individual steps in the workflow. It uses versioning capabilities from `PromptVersioningMixin` and constructs prompts possibly using `PromptTemplate`.

##### 1.5. External Dependencies
- `json`: Standard Python library used for JSON serialization.
- `abc`: Standard Python library for defining abstract base classes.
- `typing_extensions`: External library for extended typing support.

#### 2. UML Diagram

- **UML Legend**:
  - Components marked with `(New)` are to be developed as part of this module.
  - Components marked with `(Part-Of)` are identified but not fully defined.
  - Components marked with `(Used-By)` are pre-existing and are treated as dependencies.

@startuml

class "AutomatedCodingWorkflow (New)" {
    + workspace_setting: WorkspaceSetting
    + llm_integration_registry: LLMIntegrationRegistry
    + steps: Dict[str, BaseStep]
    + _initialize_steps(steps_config: Dict[str, StepsTemplateConfig])
    + to_json(): str
    + execute_step(step_id: str): Optional[str]
    + start_workflow()
}

class "LLMIntegrationRegistry (Used-By)"
class "BaseStep (New)" {
    + id: str
    + name: str
    + workflow: BaseWorkflow
    + default_prompt: str
    + to_dict(): dict
    + construct_prompt(): str
    + process_response(response: str): void
    + execute(): void
}
class "RequirementStep (New)" {
    + name: str
    + requirement_variable: PromptTemplateVariable
    + prompt_template: PromptTemplate
    + construct_prompt(requirement: str): str
    + process_response(response: str): void
    + execute(): void
}
class "ArchitectureDesignStep (New)" {
    + name: str
    + prompt_template: str
}

enum "WorkflowStatus (New)" {
    Success
    Started
    Failure
}

class "StepsTemplateConfig (New)" {
    step_class: type
    steps: Dict[str, StepsTemplateConfig]
}

class "WorkflowTemplateStepsConfig (New)" {
    workspace_path: str
    steps: Dict[str, StepsTemplateConfig]
}
object "WORKFLOW_CONFIG (New)"
class "WorkspaceSetting (Used-By)"
class "PromptTemplate (Used-By)"
class "PromptVersioningMixin (Used-By)"
class "BaseWorkflow (New)" {
    + id: str
    + name: str
    + status: WorkflowStatus
    + llm_integration: BaseLLMIntegration
    + start_workflow()
    + execute_step(step_config: dict)
}
class "UniqueIDGenerator (Used-By)"
class "PromptTemplateVariable (Used-By)"
class "BaseLLMIntegration (Part-Of)"

"AutomatedCodingWorkflow (New)" --> "LLMIntegrationRegistry (Used-By)"
"AutomatedCodingWorkflow (New)" --> "BaseStep (New)"
"AutomatedCodingWorkflow (New)" --> "WorkflowStatus (New)"
"AutomatedCodingWorkflow (New)" --> "StepsTemplateConfig (New)"
"AutomatedCodingWorkflow (New)" --> "WorkflowTemplateStepsConfig (New)"
"AutomatedCodingWorkflow (New)" --> "WORKFLOW_CONFIG (Part-Of)"
"AutomatedCodingWorkflow (New)" --> "WorkspaceSetting (Used-By)"
"BaseStep (New)" --> "PromptTemplate (Used-By)"
"BaseStep (New)" <|-- "PromptVersioningMixin (Used-By)"
"BaseStep (New)" <|-- "ABC (Used-By)"
"BaseStep (New)" --> "BaseWorkflow (New)"
"BaseStep (New)" --> "UniqueIDGenerator (Used-By)"
"RequirementStep (New)" --> "PromptTemplate (Used-By)"
"RequirementStep (New)" --> "PromptTemplateVariable (Used-By)"
"ArchitectureDesignStep (New)" --> "PromptTemplate (Used-By)"
"BaseWorkflow (New)" --> "WorkflowStatus (New)"
"BaseWorkflow (New)" --> "BaseLLMIntegration (Used-By)"

@enduml


### Feature Code Design Documentation:

#### 1. Code Architecture Design:

1.1. **High-Level Design**: 
The enhancement introduces a versioning mechanism for prompts designed for entities or classes that leverage prompts to communicate with Large Language Models (LLMs). By integrating the `PromptVersioningMixin`, entities, such as workflow steps or any other component interfacing with LLMs, can store, manage, and refine versioned prompts in a database. This ensures consistent and optimized interactions with LLMs, capitalizing on the most effective prompt versions. The Repository Pattern from previous features is utilized to facilitate smooth database interactions.

#### 2. Component Modifications:

2.1. **New Components**:

- **PromptVersioningMixin**: 
  - *Purpose*: A mixin class offering versioning capabilities with integrated database interactions.
  - *Attributes*: 
    - `current_prompt: str`: The in-memory cached value of the current effective prompt for the entity. This value is initially fetched from the database, and then it's used for subsequent operations to reduce database accesses. This attribute is updated whenever a new current effective version is set.
    - `default_prompt: str`: The default prompt intrinsic to the entity's code.
    - `repository: PromptVersionRepository`: An instance of the repository to handle database operations related to versioning.
  - *Abstract Properties*:
    - `prompt_name: str`: An abstract property that mandates implementing classes to provide a unique identifier for their prompts.
  - *Methods*: 
    - `add_version(prompt: str)`: Creates and stores a new version of the prompt. If the number of versions surpasses the limit (4), it deletes the oldest version.
    - `get_version(version_no: int)`: Retrieves the content of a specified prompt version.
    - `set_current_effective_version(version_no: int)`: Sets a specific version as the current effective prompt. This method updates the `current_prompt` attribute with the content of the specified version and marks this version as the effective one in the database.
    - `get_current_effective_prompt()`: Fetches the content of the current effective prompt from the database. If no effective prompt exists for the entity, it initializes the database with the entity's intrinsic default prompt, designating it as version 'v1', and then returns this default prompt. The method should handle potential errors gracefully, ensuring that a prompt is always returned.
    - `load_latest_version()`: Retrieves the content of the latest created prompt version.

- **VersionedPrompt**:
  - *Purpose*: Represents the state of a prompt at a particular version in-memory.
  - *Attributes*: 
    - `version_no: int`: The version number.
    - `prompt_content: str`: The content of the prompt for that version.

- **PromptVersionModel (extends BaseModel)**:
  - *Purpose*: Represents the database model for storing versioned prompts.
  - *Attributes*: 
    - `prompt_name: String`: Identifier for the prompt.
    - `version_no: Integer`: Version number.
    - `prompt_content: Text`: Content of the prompt.
    - `is_current_effective: Boolean`: Indicates if this version is the current effective prompt.
    (Note: The attributes `created_at` and `updated_at` are inherited from `BaseModel` and are therefore not explicitly defined here.)

- **PromptVersionRepository (extends BaseRepository)**:
  - *Purpose*: Offers CRUD operations for `PromptVersionModel` and manages version-specific operations.
  - *Methods*: 
    - `create_version(prompt_version: PromptVersionModel)`: Stores a new prompt version.
    - `get_version(prompt_name: String, version_no: int)`: Fetches a specific version of a prompt.
    - `get_current_effective_version(prompt_name: String)`: Retrieves the current effective prompt for an entity.
    - `get_latest_created_version(prompt_name: String)`: Retrieves the most recently created prompt version.
    - `delete_version(prompt_name: String, version_no: int)`: Deletes a specific version.
    - `delete_oldest_version(prompt_name: String)`: Deletes the oldest version when the limit is surpassed.

2.2. **Updated Components**:

- **BaseStep**:
  - *Modification*: Extend from `PromptVersioningMixin`.
  - *Purpose*: Inherits versioning capabilities with database integration. The static prompt template from `BaseStep` is removed, and prompts are dynamically derived based on the version.

2.3. **Unchanged Components**:

- **BaseModel**: 
  - *Description*: The foundational model class for database entities.
  
- **BaseRepository**: 
  - *Description*: Provides generic CRUD operations.

#### 3. Interactions:

3.1. **Component Interactions**:

- Entities augmented with `PromptVersioningMixin` will possess versioning capabilities with database operations.
- `PromptVersioningMixin` will interface with `PromptVersionRepository` for database interactions.

#### 4. External Dependencies: 

- **SQLAlchemy**: ORM tool facilitating database operations.
- **Alembic**: For database migration and versioning.

#### 5. UML Diagram:

@startuml

package "Versioned Prompts Structure" {

class "PromptVersioningMixin (New)"

 {
    + add_version(prompt: str)
    + get_version(version_no: int): str
    + set_current_effective_version(version_no: int)
    + get_current_effective_prompt(): str
    + load_latest_version(): str
    + current_prompt: str
    + default_prompt: str
    + repository: PromptVersionRepository
    + prompt_name: str (Abstract Property)
}

class "VersionedPrompt (New)" {
    + version_no
    + prompt_content
}

class "PromptVersionModel (New, extends BaseModel)" {
    + prompt_name: String
    + version_no: Integer
    + prompt_content: Text
    + is_current_effective: Boolean
    + created_at: DateTime
}

class "PromptVersionRepository (New, extends BaseRepository)" {
    + create_version(prompt_version: PromptVersionModel): PromptVersionModel
    + get_version(prompt_name: String, version_no: int): PromptVersionModel
    + get_current_effective_version(prompt_name: String): PromptVersionModel
    + get_latest_created_version(prompt_name: String): PromptVersionModel
    + delete_version(prompt_name: String, version_no: int)
    + delete_oldest_version(prompt_name: String)
}

"PromptVersioningMixin (New)" o-- "VersionedPrompt (New)"
"PromptVersioningMixin (New)" o-- "PromptVersionRepository (New)"
"PromptVersionModel (New)" --|> "BaseModel"
"PromptVersionRepository (New)" --|> "BaseRepository"

}

@enduml

