
You are a Python software architect. In the [Documentation] section, you'll find feature requirements and design details between the `$start$` and `$end$` tokens. Your mission is to break these into detailed subtasks, as illustrated in the [SubtaskExample] section.

Follow these criteria for each task:
- **Clear Objective**: Clearly define the goal, such as creating a class, method, or specific algorithm.
- **File Specification**: Indicate the precise file path for additions or modifications. Ensure adherence to Python's best practices for folder and file naming. Note: Each class should have its dedicated file.
- **Functionality Details**: Describe the expected code behavior, return types, or its interactions with other code segments.
- **Integration Points**: Highlight any code interactions with other parts of the codebase, emphasizing dependencies or interfaces.
- Each subtask should be framed between `#task start#` and `#task end#` tokens.

Ensure that the subtasks are logically ordered, with dependent tasks listed before those that rely on them.



#### Task 1: Implement the `BaseStep` Class
#task start#
- **Objective**: Create the foundational class for all workflow steps.
- **File Specification**: `autobyteus/workflow/base_step.py`
- **Functionality Details**: This class should lay down the foundation for all steps in the workflow. Methods and attributes common to all steps should be defined here.
- **Integration Points**: Will serve as the base for all other steps like `RequirementStep`, `ArchitectureDesignStep`, etc.
#task end#

#### Task 2: Implement the `WorkflowStatus` Enumeration
#task start#
- **Objective**: Define an enumeration that represents the different states of the workflow.
- **File Specification**: `autobyteus/workflow/workflow_status.py`
- **Functionality Details**: This enumeration will hold possible states like INITIALIZED, IN_PROGRESS, COMPLETED, etc.
- **Integration Points**: It will be used by the `AutomatedCodingWorkflow` to track the current state.
#task end#

#### Task 3: Create the `WORKFLOW_CONFIG` Configuration
#task start#
- **Objective**: Define configuration specifics for the entire workflow.
- **File Specification**: `autobyteus/workflow/config.py`
- **Functionality Details**: This will store configuration parameters for initializing and managing the workflow.
- **Integration Points**: It will be utilized by the `AutomatedCodingWorkflow` during initialization.
#task end#

#### Task 4: Implement the `StepsTemplateConfig` Class
#task start#
- **Objective**: Define configuration parameters for individual steps.
- **File Specification**: `autobyteus/workflow/steps_template_config.py`
- **Functionality Details**: Contains specifics for how each step should be configured and their unique properties.
- **Integration Points**: Individual steps like `RequirementStep` will use this for their configurations.
#task end#

#### Task 5: Implement the `AutomatedCodingWorkflow` Class
#task start#
- **Objective**: Manage the automated coding workflow.
- **File Specification**: `autobyteus/workflow/automated_coding_workflow.py`
- **Functionality Details**: This class should be able to initialize steps, run specific steps, serialize the workflow to JSON, and start the workflow.
- **Integration Points**: Interacts with all individual steps, `WORKFLOW_CONFIG`, `LLMIntegrationRegistry`, and `WorkspaceSetting`.
#task end#

#### Task 6: Implement the `RequirementStep` Class
#task start#
- **Objective**: Process coding requirements.
- **File Specification**: `autobyteus/workflow/requirement_step.py`
- **Functionality Details**: Accepts and processes coding requirements, constructs a unique prompt for the LLM based on the requirements.
- **Integration Points**: Derives from `BaseStep`. Uses `PromptTemplate` and `PromptTemplateVariable` for prompt creation.
#task end#

#### Task 7: Implement the `ArchitectureDesignStep` Class
#task start#
- **Objective**: Manage the architectural design phase.
- **File Specification**: `autobyteus/workflow/architecture_design_step.py`
- **Functionality Details**: Constructs a unique prompt for the LLM based on design needs.
- **Integration Points**: Inherits from `BaseStep` and makes use of `PromptTemplate`.
#task end#

#### Task 8: Implement the `ImplementationStep` Class
#task start#
- **Objective**: Oversee the coding implementation phase.
- **File Specification**: `autobyteus/workflow/implementation_step.py`
- **Functionality Details**: Constructs a unique prompt for the LLM based on implementation details.
- **Integration Points**: Inherits from `BaseStep` and uses `PromptTemplate`.
#task end#

#### Task 9: Implement the `TestGenerationStep` Class
#task start#
- **Objective**: Generate tests for Python code.
- **File Specification**: `autobyteus/workflow/test_generation_step.py`
- **Functionality Details**: Constructs a unique prompt for the LLM based on the code to generate tests.
- **Integration Points**: Inherits from `BaseStep` and integrates with `PromptTemplate` and `PromptTemplateVariable`.
#task end#

#### Task 10: Integration Testing
#task start#
- **Objective**: Ensure that the implemented classes and functionalities work seamlessly together.
- **File Specification**: `tests/integration/test_automated_coding_workflow.py`
- **Functionality Details**: Test the complete flow from initialization to the execution of individual steps.
- **Integration Points**: This will require integration testing with all the newly implemented components.
#task end#